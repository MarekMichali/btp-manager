name: Run stress tests

on: 
  pull_request:
    branches: [main, sm-integration]
    paths-ignore:
      - "**.md"
      - "sec-scanners-config.yaml"
env:
  IMAGE_REPO: europe-docker.pkg.dev/kyma-project/dev/btp-manager
  IMAGE_TAG: PR-${{ github.event.number }}

jobs:
  frequent-secret-update-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh $IMAGE_TAG"

      - name: Install BTP Manager and SAP BTP Operator
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh $IMAGE_REPO:$IMAGE_TAG dummy ci"

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          kubectl port-forward deployment/btp-manager-controller-manager 8080:8080 -n kyma-system &
          sleep 5
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk -F' ' '{print $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk -F' ' '{print $2}')
          echo "Sum of reconcile time: $SUM seconds"
          echo "Count of reconciliations: $COUNT"
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "$SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds"
          else
            echo "Count is zero, cannot calculate average."
          fi
          echo "Reconcile errors: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk -F' ' '{print $2}')"
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk -F' ' '{print $2}')"

      - name: Patch sap-btp-manager secret in a loop
        run: |
            for i in {1..10}; do
              kubectl -n kyma-system patch secret sap-btp-manager --type='json' -p='[{"op": "replace", "path": "/data/sm_url", "value": "bmV3X3NtX3VybA=="}]'
              sleep 0.5
              kubectl -n kyma-system patch secret sap-btp-manager --type='json' -p='[{"op": "replace", "path": "/data/sm_url", "value": "dGVzdF9zbV91cmw="}]'
              sleep 0.5
            done

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk -F' ' '{print $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk -F' ' '{print $2}')
          echo "Sum of reconcile time: $SUM seconds"
          echo "Count of reconciliations: $COUNT"
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "$SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds"
          else
            echo "Count is zero, cannot calculate average."
          fi
          echo "Reconcile errors: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk -F' ' '{print $2}')"
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk -F' ' '{print $2}')"

  reconcile-different-statuses-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh $IMAGE_TAG"

      - name: Install BTP Manager and SAP BTP Operator
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh $IMAGE_REPO:$IMAGE_TAG dummy ci"

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          kubectl port-forward deployment/btp-manager-controller-manager 8080:8080 -n kyma-system &
          sleep 5
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk -F' ' '{print $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk -F' ' '{print $2}')
          echo "Sum of reconcile time: $SUM seconds"
          echo "Count of reconciliations: $COUNT"
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "$SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds"
          else
            echo "Count is zero, cannot calculate average."
          fi
          echo "Reconcile errors: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk -F' ' '{print $2}')"
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk -F' ' '{print $2}')"

      - name: Delete and apply sap-btp-manager secret in a loop
        run: |
          for i in {1..10}; do
            kubectl delete -f ./examples/btp-manager-secret.yaml
            sleep 0.5
            kubectl apply -f ./examples/btp-manager-secret.yaml
            sleep 0.5
          done

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk -F' ' '{print $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk -F' ' '{print $2}')
          echo "Sum of reconcile time: $SUM seconds"
          echo "Count of reconciliations: $COUNT"
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "$SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds"
          else
            echo "Count is zero, cannot calculate average."
          fi
          echo "Reconcile errors: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk -F' ' '{print $2}')"
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk -F' ' '{print $2}')"
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk -F' ' '{print $2}')"
          BUCKETS=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_bucket{controller="btpoperator",le=')
          PREVIOUS_VALUE=$(echo "$BUCKETS" | tail -n 1 | awk -F' ' '{print $2}')
          while read -r LINE; do
            VALUE=$(echo "$LINE" | awk -F' ' '{print $2}')
            if [ "$VALUE" -ne "$PREVIOUS_VALUE" ]; then
              echo "First differing bucket: $LINE"
              echo "Previous bucket: $PREVIOUS_LINE"
              LE_VALUE=$(echo "$PREVIOUS_LINE" | awk -F'le="' '{print $2}' | awk -F'"' '{print $1}')
              echo "Maximum reconcile time is less than or equal to: $LE_VALUE seconds"
              break
            fi
            PREVIOUS_LINE=$LINE
            PREVIOUS_VALUE=$VALUE
          done <<< "$(echo "$BUCKETS" | awk '{lines[NR] = $0} END {for (i = NR; i > 0; i--) print lines[i]}')"

  reconcile-after-crash-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh $IMAGE_TAG"

      - name: Install BTP Manager and SAP BTP Operator
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh $IMAGE_REPO:$IMAGE_TAG dummy ci"

      - name: Delete btp-manager-controller-manager pod and measure recovery time
        run: |
          kubectl delete -f ./examples/btp-manager-secret.yaml
          
          echo "Waiting for btpoperator to enter 'Warning' state..."
          until kubectl get btpoperator -n kyma-system -o jsonpath='{.items[0].status.state}' | grep -q "Warning"; do
            sleep 1
          done
          kubectl delete pod -n kyma-system -l app.kubernetes.io/component=btp-manager.kyma-project.io
          kubectl apply -f ./examples/btp-manager-secret.yaml
          START_TIME=$(date +%s)

          echo "Waiting for btp-manager-controller-manager pod to be ready..."
          kubectl wait --for=condition=ready pod -n kyma-system -l app.kubernetes.io/component=btp-manager.kyma-project.io --timeout=300s

          echo "Waiting for btpoperator to enter 'Ready' state..."
          until kubectl get btpoperator -n kyma-system -o jsonpath='{.items[0].status.state}' | grep -q "Ready"; do
            sleep 1
          done

          END_TIME=$(date +%s)
          RECOVERY_TIME=$((END_TIME - START_TIME))
          echo "Time to recover and reconcile after crash: $RECOVERY_TIME seconds"

  resource-exhaustion-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh $IMAGE_TAG"

      - name: Install BTP Manager and SAP BTP Operator
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh $IMAGE_REPO:$IMAGE_TAG dummy ci"

      - name: Limit btp-manager-controller-manager resources
        run: |
          echo "Patching btp-manager-controller-manager deployment to reduce resource limits..."
          kubectl patch deployment btp-manager-controller-manager -n kyma-system --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/resources/limits/cpu", "value": "20m"}, {"op": "replace", "path": "/spec/template/spec/containers/0/resources/limits/memory", "value": "64Mi"}]'
          
          echo "Waiting for btp-manager-controller-manager pod to restart with new resource limits..."
          kubectl rollout status deployment btp-manager-controller-manager -n kyma-system --timeout=300s

      - name: Delete and reapply sap-btp-manager secret
        run: |
          kubectl delete -f ./examples/btp-manager-secret.yaml
          echo "Waiting for btpoperator to enter 'Warning' state..."
          until kubectl get btpoperator -n kyma-system -o jsonpath='{.items[0].status.state}' | grep -q "Warning"; do
            sleep 1
          done

          kubectl apply -f ./examples/btp-manager-secret.yaml
          echo "Waiting for btpoperator to enter 'Ready' state..."
          until kubectl get btpoperator -n kyma-system -o jsonpath='{.items[0].status.state}' | grep -q "Ready"; do
            sleep 1
          done
