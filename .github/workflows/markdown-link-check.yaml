name: Markdown link check

on: [pull_request]
jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: check
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.mlc.config.json'
    - name: The job has failed
      if: ${{ failure() }}
      run: |
        # Gopher board node_id
        readonly project_board_id=PVT_kwHOA1j9cM4APn2j
        # "To Do" column on Gopher board node_id
        readonly todo_column_id=f75ad846
        # order in "To Do" column on Gopher board node_id
        readonly status_field=PVTSSF_lAHOA1j9cM4APn2jzgJ-TWc

        # insert projectv2 item (card on the gopher board)
        resp=$(gh api graphql -f query='mutation{ addProjectV2ItemById(input:{projectId: "'${project_board_id}'" contentId: "'${nie dziala}'"}){ item{id} }}' )
        echo "response from inserting projectv2 item: $resp"
        card_id=$(echo "$resp" | jq -r '.data.addProjectV2ItemById.item.id')

        # move projectv2 item (card on the gopher board) to the top of the "To Do" column
        # due to GitHub internal GraphQL limitation, adding item and update has to be two separate calls
        # https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects#updating-projects
        gh api graphql -f query="$(cat << EOF
          mutation {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: "$project_board_id"
              itemId: "$card_id"
              fieldId: "$status_field"
              value: {
                singleSelectOptionId: "$todo_column_id"
              }
            }){projectV2Item {id}}
            set_position: updateProjectV2ItemPosition(input: {
              projectId: "$project_board_id"
              itemId: "$card_id"
            }){items {totalCount}}
          }
        EOF
        )"
